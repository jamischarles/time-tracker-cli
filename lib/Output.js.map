{"version":3,"sources":["../src/Output.js"],"names":["sumarize","search","tasks","rate","full","table","head","chars","colAligns","style","total","tableRunning","map","task","index","duration","stop","diff","start","outputDuration","name","startTime","format","stopTime","push","console","log","toString","table2"],"mappings":"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","file":"Output.js","sourcesContent":["import moment from 'moment'\nimport Table from 'cli-table'\n\nimport {getMinutes, humanParseDiff, recognizeModifierTiming, calcRate} from './Utils'\n\nexport const sumarize = function(search, tasks, rate, full) {\n    let table = new Table({\n        // head: ['Task', 'Duration', 'Dates'],\n        head: ['<Done>', 'Start', 'Stop', 'Duration'],\n        chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n        colAligns: ['left', 'right', 'center'],\n        style: { head: ['green'] }\n    });\n    let total = 0\n    let head= `Search: ${search} \\n`\n\n    // separate table for running timers\n    let tableRunning = new Table({\n        // head: ['Task', 'Duration', 'Dates'],\n        head: ['<Running>', 'Duration'],\n        chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''},\n        colAligns: ['left', 'right', 'center'],\n        style: { head: ['green'] }\n    })\n\n    tasks.map((task, index)=>{\n        let duration = moment(task.task.stop).diff(moment(task.task.start), 'seconds')\n        total += duration\n\n        let outputDuration = humanParseDiff(duration)\n        outputDuration = ` ${getMinutes(duration)}m (${outputDuration})` // add min in parens\n\n        let name = task.name\n\n        // FIXME: Kill this\n        let startTime = moment(task.task.start).format('MM/DD/YYYY')\n        let stopTime = moment(task.task.stop).format('MM/DD/YYYY')\n        if (startTime !== stopTime){\n            startTime = moment(task.task.start).format('MM/DD') + '|' + moment(task.task.stop).format('MM/DD YYYY')\n        }\n\n        // table.push([name, outputDuration, startTime])\n        // if running timer use other table\n        if (!task.task.stop) {\n            // only min output\n            outputDuration = `${getMinutes(duration)}m`\n\n            tableRunning.push([name, outputDuration])\n        } else {\n            // format nicer if task has ended\n            startTime = moment(task.task.start).format('h:mm:ss a')\n            stopTime = moment(task.task.stop).format('h:mm:ss a')\n\n            table.push([name, startTime, stopTime, outputDuration])\n        }\n    })\n\n    console.log(tableRunning.toString());\n    console.log(table.toString());\n\n\n    if (full){\n        let table2 = new Table()\n        table2.push(\n            // { 'Search': ['\\\"' + search + '\\\"'] },\n            { 'Total time': [`${getMinutes(total)}m (${humanParseDiff(total)})`] },\n            // { 'Total minutes': [getMinutes(total)] + 'm' }\n        )\n\n        if (rate){\n            table2.push({ 'Rate': [calcRate(rate, total)] })\n        }\n\n        console.log(table2.toString());\n    }\n}\n"]}