{"version":3,"sources":["../src/Utils.js"],"names":["recognizeModifierTiming","string","r","arr","res","exec","push","value","momentKey","calcRate","rate","total","amount","mod","substr","length","slice","parseFloat","toFixed","humanParseDiff","secs","hours","Math","floor","minutes","seconds","getMinutes"],"mappings":";;;;;AAAO,IAAMA,4DAA0B,SAA1BA,uBAA0B,CAAUC,MAAV,EAAiB;AACpD,QAAIC,IAAI,kBAAR;AACA,QAAIC,YAAJ;AACA,QAAIC,MAAM,EAAV;AACA,WAAO,CAACD,MAAMD,EAAEG,IAAF,CAAOJ,MAAP,CAAP,MAA2B,IAAlC,EAAwC;AACpCG,YAAIE,IAAJ,CAAS;AACLC,mBAAOJ,IAAI,CAAJ,CADF;AAELK,uBAAWL,IAAI,CAAJ;AAFN,SAAT;AAIH;AACD,WAAOC,GAAP;AACH,CAXM;;AAaA,IAAMK,8BAAW,SAAXA,QAAW,CAAUC,IAAV,EAAgBC,KAAhB,EAAsB;AAC1C,QAAIC,eAAJ;AACA,QAAIC,MAAMH,KAAKI,MAAL,CAAYJ,KAAKK,MAAL,GAAc,CAA1B,CAAV;AACA,QAAIR,QAAQG,KAAKM,KAAL,CAAW,CAAX,EAAcN,KAAKK,MAAL,GAAc,CAA5B,CAAZ;;AAEA,YAAQF,GAAR;AACI,aAAK,GAAL;AACID,qBAAUD,QAAM,EAAN,GAAS,EAAV,GAAcM,WAAWV,KAAX,CAAvB;AACA;AACJ,aAAK,GAAL;AACIK,qBAAUD,QAAM,EAAP,GAAWM,WAAWV,KAAX,CAApB;AACA;AACJ,aAAK,GAAL;AACIK,qBAASD,QAAMM,WAAWV,KAAX,CAAf;AACA;AATR;;AAYA,WAAOK,OAAOM,OAAP,CAAe,CAAf,CAAP;AACH,CAlBM;;AAoBA,IAAMC,0CAAiB,SAAjBA,cAAiB,CAASC,IAAT,EAAe;AACzC,QAAIC,QAAUC,KAAKC,KAAL,CAAWH,OAAO,IAAlB,CAAd;AACA,QAAII,UAAUF,KAAKC,KAAL,CAAW,CAACH,OAAQC,QAAQ,IAAjB,IAA0B,EAArC,CAAd;AACA,QAAII,UAAUL,OAAQC,QAAQ,IAAhB,GAAyBG,UAAU,EAAjD;AACAH,YAASA,SAAS,CAAT,GAAa,EAAb,GAAkB,CAACA,QAAQ,EAAR,GAAa,MAAMA,KAAnB,GAA2BA,KAA5B,IAAqC,IAAhE;AACAG,cAAYA,WAAW,CAAX,IAAgBH,SAAS,EAA1B,GAAgC,EAAhC,GAAqC,CAACG,UAAU,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAhC,IAA2C,IAA3F;AACAC,cAAWA,WAAW,CAAX,GAAe,EAAf,GAAoB,CAACA,UAAW,EAAX,GAAgB,MAAMA,OAAtB,GAAgCA,OAAjC,IAA4C,GAA3E;AACA,WAAOJ,QAAQG,OAAR,GAAkBC,OAAzB;AACH,CARM;;AAUA,IAAMC,kCAAa,SAAbA,UAAa,CAASN,IAAT,EAAe;AACrC,QAAII,UAAUF,KAAKC,KAAL,CAAYH,OAAO,EAAnB,CAAd;AACA,WAAOI,OAAP;AACH,CAHM","file":"Utils.js","sourcesContent":["export const recognizeModifierTiming = function (string){\n    let r = /(\\d{1,})([hms])/g\n    let arr\n    let res = []\n    while ((arr = r.exec(string)) !== null) {\n        res.push({\n            value: arr[1],\n            momentKey: arr[2]\n        })\n    }\n    return res\n}\n\nexport const calcRate = function (rate, total){\n    let amount\n    let mod = rate.substr(rate.length - 1)\n    let value = rate.slice(0, rate.length - 1)\n\n    switch (mod) {\n        case 'h':\n            amount = (total/60/60)*parseFloat(value)\n            break;\n        case 'm':\n            amount = (total/60)*parseFloat(value)\n            break;\n        case 's':\n            amount = total*parseFloat(value)\n            break;\n    }\n\n    return amount.toFixed(2)\n}\n\nexport const humanParseDiff = function(secs) {\n    let hours   = Math.floor(secs / 3600)\n    let minutes = Math.floor((secs - (hours * 3600)) / 60)\n    let seconds = secs - (hours * 3600) - (minutes * 60)\n    hours = (hours == 0 ? '' : (hours < 10 ? '0' + hours : hours) + 'h ')\n    minutes = ((minutes == 0 && hours == '') ? '' : (minutes < 10 ? '0' + minutes : minutes) + 'm ')\n    seconds = (seconds == 0 ? '' : (seconds  < 10 ? '0' + seconds : seconds) + 's')\n    return hours + minutes + seconds\n}\n\nexport const getMinutes = function(secs) {\n    let minutes = Math.floor((secs / 60))\n    return minutes\n}\n"]}