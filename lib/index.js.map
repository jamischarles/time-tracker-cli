{"version":3,"sources":["../src/index.js"],"names":["pkg","notify","module","exports","createTimer","p","version","description","option","parse","argv","start","args","search","finish","taskName","arr","result","length","stop","name","console","log","clear","clearStore","setInterval","process","stdout","clearLine","write","getTime","report","export","JSON","stringify","getTasksJson"],"mappings":"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","file":"index.js","sourcesContent":["import 'babel-polyfill'\n\nimport program from 'commander'\nimport updateNotifier from 'update-notifier'\n\nimport Task from './Task'\nimport {sumarize} from './Output'\nimport {humanParseDiff} from './Utils'\n\nimport timer from './Manager'\nimport pkg from '../package.json'\n\nupdateNotifier({pkg}).notify()\n\n\n/*\n *\n *\n TODO:\n- What if it's just a foreground process?\n- you pause or stop it\n- then it prints the whole table for you...\n\n */\n//\n\nmodule.exports = function createTimer (p) {\n\n    program\n        .version(pkg.version)\n        .description('Tiny time tracker for projects')\n\n        .option('-s, --start <task> <description>', 'Start the timer task.')\n        // .option('-f, --finish <task> <description>', 'Stops the timer task.')\n        // FIXME: Maybe add optional params?\n        .option('-f, --finish ', 'Stops the timer task.')\n\n        .option('-c, --clear ', 'Delete all timers.')\n\n        // FIXME: Doesn't seem to actually work...\n        .option('-d, --description <description>', 'Adds a description for the task only in start/stop methods.')\n\n        // .option('-a, --add <task> <timeString>', 'Adds time to a task. Example: \"1h2m3s\"')\n        // .option('--remove <task> <timeString>', 'Subtract time from a task. Example: \"1h2m3s\"')\n\n        // .option('-l, --log <task>', 'Logs the timer task.')\n        // .option('-r, --report <task> <rate>', 'Report time of the tasks, searched by key, you can report all using all as key. Also you can pass a rate to calc an amount ex: 20h, calc the hours and mulpitly by 20')\n        .option('-r, --report ', 'Report time of the tasks, searched by key, you can report all using all as key. Also you can pass a rate to calc an amount ex: 20h, calc the hours and mulpitly by 20')\n        // .option('-e, --export', 'Prints the json of all tasks.')\n\n        .parse(p.argv)\n\n    let description\n    if (program.start){\n        description = program.description || program.args[0]\n        timer.start(program.start, description)\n\n        sumarize('all', timer.search('all'), program.args[0], true)\n        // setTimeout(function(){\n        //     sumarize(program.report, timer.search(program.start), program.args[0], true)\n        // },50);\n\n        // show the timer...\n\n    } else if (program.finish){\n        // if no param passed in (for now we aren't passing any, then just remove the currently running task\n        // description = program.description || program.args[0]\n        //\n        // default to all if no param is passed.\n        var taskName = program.args[0] || 'all';\n\n        // console.log('program', program)\n\n        // give us the last one...\n        // stop the last task  that matches...\n        var arr = timer.search(taskName)\n        var result = arr[arr.length -1]\n\n        timer.stop(result.name)\n\n        sumarize('all', timer.search('all'), program.args[0], true)\n        console.log('Stopped:', result.name)\n    } else if (program.clear){\n        timer.clearStore();\n        // show all of them now...\n        sumarize('all', timer.search('all'), program.args[0], true)\n\n        console.log('Store deleted');\n\n    // } else if (program.add){\n    //     timer.modifyTask('add', program.add, program.args[0])\n    //     sumarize(program.add, timer.search(program.add))\n    // } else if (program.remove){\n    //     timer.modifyTask('subtract', program.remove, program.args[0])\n    //     sumarize(program.remove, timer.search(program.remove))\n    } else if (program.log){\n        setInterval(function() {\n            process.stdout.clearLine()\n            process.stdout.write(`\\r Task: ${program.log} ${humanParseDiff(timer.getTime(program.log))}`)\n        }, 100)\n    } else if (program.report){\n        // sumarize(program.report, timer.search(program.report), program.args[0], true)\n        sumarize('all', timer.search('all'), program.args[0], true)\n    } else if (program.export){\n        console.log(JSON.stringify(timer.getTasksJson(), null, 4))\n    } else {\n        sumarize('all', timer.search('all'), program.args[0], true)\n    }\n\n}\n"]}